#!/bin/bash

### BEGIN INIT INFO
# processname:       prometheus
# Short-Description: monitoring system and time series database.
# Description:       Prometheus is a systems and service monitoring system.
#                    It collects metrics from configured targets at given intervals,
#                    evaluates rule expressions, displays the results,
#                    and can trigger alerts if some condition is observed to be true.
#
# chkconfig: 2345 80 80
# config:  {{ prometheus_config_path }}/prometheus.yml
# pidfile: {{ pid_path }}/prometheus.pid
#
#
### END INIT INFO

#set -e

# Source function library.
. /etc/init.d/functions

GOMAXPROCS=4

NAME=prometheus
DESC="Prometheus monitoring system"
DAEMON={{ prometheus_install_path }}/prometheus
USER={{ prometheus_user }}
CONFIG={{ prometheus_config_path }}/prometheus.yml
PID="{{ pid_path }}/prometheus/$NAME.pid"
LOG="{{ log_path }}/prometheus/$NAME.log"
GOSU=/usr/local/bin/gosu

RETVAL=0


#{% if prometheus_alertmanager_url is defined %}
#ALERTMANAGER_OPTS="--alertmanager.url={{ prometheus_alertmanager_url }}"
#{% else %}
#ALERTMANAGER_OPTS=
#{% endif %}

#iptables -D INPUT -p tcp --dport {{ prometheus_port }} -j ACCEPT
#if [ $? -ne 0 ]; then
#iptables -A INPUT -p tcp --dport {{ prometheus_port }} -j ACCEPT
#service iptables save
#fi

DAEMON_OPTS=""
DAEMON_OPTS="$DAEMON_OPTS --config.file=$CONFIG  --storage.tsdb.path={{ prometheus_data_path }}"
DAEMON_OPTS="$DAEMON_OPTS --web.read-timeout={{ web_read_timeout }} --web.max-connections={{ web_max_connections }} --web.console.templates={{ prometheus_install_path }}/consoles  --web.console.libraries={{ prometheus_install_path }}/console_libraries --storage.tsdb.retention={{ storage_tsdb_retention }} --storage.remote.flush-deadline={{ storage_remote_flush_deadline }} --storage.remote.read-sample-limit={{ storage_remote_read_sample_limit }} --storage.remote.read-concurrent-limit={{ storage_remote_read_concurrent_limit }} --rules.alert.for-outage-tolerance={{ rules_alert_for_outage_tolerance }} --rules.alert.for-grace-period={{ rules_alert_for_grace_period }} --rules.alert.resend-delay={{ rules_alert_resend_delay }} --alertmanager.notification-queue-capacity={{ alertmanager_notification_queue_capacity }} --alertmanager.timeout={{ alertmanager_timeout }} --query.lookback-delta={{ query_lookback_delta }} --query.timeout={{ query_timeout }} --query.max-concurrency={{ query_max_concurrency }} --query.max-samples={{ query_max_samples }} --log.level={{ log_level }}"


{% if web_external_url != '' %}
DAEMON_OPTS="$DAEMON_OPTS --web.external-url={{ web_external_url }}"
{% endif %}

{% if web_route_prefix != '' %}
DAEMON_OPTS="$DAEMON_OPTS --web.route-prefix={{ web_route_prefix }}"
{% endif %}

{% if web_user_assets != '' %}
DAEMON_OPTS="$DAEMON_OPTS --web.user-assets={{ web_user_assets }}"
{% endif %}

{% if web_enable_lifecycle == 'true' %}
DAEMON_OPTS="$DAEMON_OPTS --web.enable-lifecycle"
{% endif %}

{% if web_enable_admin_api == 'true' %}
DAEMON_OPTS="$DAEMON_OPTS --web.enable-admin-api"
{% endif %}

{% if storage_tsdb_no_lockfile == 'true' %}
DAEMON_OPTS="$DAEMON_OPTS --storage.tsdb.no-lockfile"
{% endif %}

{% if prometheus_opts is defined %}
DAEMON_OPTS="$DAEMON_OPTS {{ prometheus_opts }}"
{% endif %}

# Check if DAEMON binary exist
[ -f $DAEMON ] || exit 0

service_checks() {

  # Prepare directories
  mkdir -p "{{ pid_path }}" "{{ log_path }}"
  chmod -R 0755 "{{ pid_path }}" "{{ log_path }}"

  check_alive=`ps axf|grep ${DAEMON} | grep -v grep |wc -l`
  if [ "$check_alive" -ne 0 ]; then
    echo "Service already started; skip..."
    exit 1
  else
    echo "Service was aborted abnormally; clean the PID file and continue..."
    if [ -f "$PID" ]; then
      rm -f "$PID"
    fi
  fi
}

start() {
  service_checks $1
  $GOSU $USER   $DAEMON $DAEMON_OPTS  > $LOG 2>&1  &
  RETVAL=$?
  echo $! > $PID
}

stop() {
  killproc -p $PID -b $DAEMON  $NAME
  if [ -f $PID ]; then
    rm -rf $PID
  fi
  RETVAL=$?
}

reload() {
  log_daemon_msg "Reloading $DESC configuration -" "$NAME"
  prome_pid=`cat ${PID}` && kill -HUP ${prome_pid}
  #killproc -p $PID -b $DAEMON  $NAME -HUP
  RETVAL=$?
}

case "$1" in
  start)
    start
    echo -n $"Starting $DESC -" "$NAME" $'\n'
    ;;

  stop)
    echo -n $"Stopping $DESC -" "$NAME" $'\n'
    stop
    ;;

  reload)
    echo -n $"Reloading $DESC configuration -" "$NAME" $'\n'
    reload
    ;;

  restart|force-reload)
    stop
    start
    echo -n $"Restarting $DESC -" "$NAME" $'\n'
    ;;

  syntax)
    $DAEMON --help
    ;;

  status)
    status -p $PID $DAEMON
    ;;

  *)
    echo -n $"Usage: /etc/init.d/$NAME {start|stop|reload|restart|force-reload|syntax|status}" $'\n'
    ;;
esac

exit $RETVAL
