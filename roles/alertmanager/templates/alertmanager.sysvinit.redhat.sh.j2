#!/bin/bash

### BEGIN INIT INFO
# processname:       alertmanager
# Short-Description: Prometheus Alertmanager.
# Description:       The Alertmanager receives alerts from one or more Prometheus servers.
#                    It manages those alerts, including silencing, inhibition, aggregation
#                    and sending out notifications via methods such as email, PagerDuty and HipChat.
#
# chkconfig: 2345 80 80
# config:  {{ alertmanager_config_path }}/alertmanager.yml
# pidfile: {{ pid_path }}/alertmanager.pid
#
#
### END INIT INFO

#set -e

# Source function library.
. /etc/init.d/functions


NAME=alertmanager
DESC="Prometheus Alertmanager"
DAEMON={{ alertmanager_install_path }}/alertmanager
USER={{ prometheus_user }}
CONFIG={{ alertmanager_config_path }}/alertmanager.yml
PID="{{ pid_path }}/alertmanager/$NAME.pid"
LOG="{{ log_path }}/alertmanager/$NAME.log"
GOSU=/usr/local/bin/gosu



DAEMON_OPTS="--config.file=$CONFIG \
--data.retention={{ data_retention }} \
--alerts.gc-interval={{ alerts_gc_interval }} --log.level={{ log_level }} \
--web.listen-address=":{{ alertmanager_port }}" "
{% if cluster_peer %}
DAEMON_OPTS="$DAEMON_OPTS --cluster.peer={{ cluster_peer }}:{{ alertmanager_cluster_port }} --cluster.listen-address=:{{ alertmanager_cluster_port }}"
{% endif %}
{% if web_external_url %}
DAEMON_OPTS="$DAEMON_OPTS --web.external-url={{ web_external_url }}"
{% endif %}

{% if web_route_prefix %}
DAEMON_OPTS="$DAEMON_OPTS --web.route-prefix={{ web_route_prefix }}"
{% endif %}

#{% if cluster_advertise_address %}
#DAEMON_OPTS="$DAEMON_OPTS --cluster.advertise-address={{ cluster_advertise_address }}"
#{% endif %}

#{% if cluster_peer %}
#DAEMON_OPTS="$DAEMON_OPTS --cluster.peer={{ cluster_peer }}"
#{% endif %}

{% if alertmanager_opts is defined %}
DAEMON_OPTS="$DAEMON_OPTS {{ alertmanager_opts }}"
{% endif %}

RETVAL=0


#{% if alertmanager_port is defined %}
#iptables -A INPUT -p tcp --dport {{ alertmanager_port }} -j ACCEPT
#{% else %}
#iptables -A INPUT -p tcp --dport 9093 -j ACCEPT
#{% endif %}
#service iptables save


# Check if DAEMON binary exist
[ -f $DAEMON ] || exit 0

service_checks() {
  # Check if START variable is set to "yes", if not we exit.


  check_alive=`ps axf|grep ${DAEMON} | grep -v grep |wc -l`
  if [ "$check_alive" -ne 0 ]; then
    echo "Service already started; skip..."
    exit 1
  else
    echo "Service was aborted abnormally; clean the PID file and continue..."
    if [ -f "$PID" ]; then
      rm -f "$PID"
    fi
  fi
}

start() {
  service_checks $1
  $GOSU $USER   $DAEMON $DAEMON_OPTS  > $LOG 2>&1  &
  RETVAL=$?
  echo $! > $PID
}

stop() {
  killproc -p $PID -b $DAEMON  $NAME
  if [ -f $PID ]; then
    rm -rf $PID
  fi
  RETVAL=$?
}

reload() {
  am_pid=`cat ${PID}` && kill -HUP ${am_pid}
  #killproc -p $PID -b $DAEMON  $NAME -HUP
  RETVAL=$?
}


case "$1" in
  start)
    start
    echo -n $"Starting $DESC -" "$NAME" $'\n'
    ;;

  stop)
    echo -n $"Stopping $DESC -" "$NAME" $'\n'
    stop
    ;;

  reload)
    echo -n $"Reloading $DESC configuration -" "$NAME" $'\n'
    reload
    ;;

  restart|force-reload)
    stop
    start
    echo -n $"Restarting $DESC -" "$NAME" $'\n'
    ;;

  syntax)
    $DAEMON --help
    ;;

  status)
    status -p $PID $DAEMON
    ;;

  *)
    echo -n $"Usage: /etc/init.d/$NAME {start|stop|reload|restart|force-reload|syntax|status}" $'\n'
    ;;
esac

exit $RETVAL
